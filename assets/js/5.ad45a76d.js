(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{437:function(t,o,a){t.exports=a.p+"assets/img/2021-09-24-19-03-43.1b79ae7b.png"},449:function(t,o,a){"use strict";a.r(o);var s=a(17),e=Object(s.a)({},(function(){var t=this,o=t.$createElement,s=t._self._c||o;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("前端便是我们之前所作的 HTML 页面，以可视化的形式通过浏览器将图片、数据等呈现给用户，后端便是负责数据的存储、整理和处理，并接收前端发来的请求将所需要的数据返回给前端。")]),t._v(" "),s("p",[t._v("后端开发中，使用较为广泛的是 Java 的 Spring 框架，Python 的 Flask、Django 框架以及 Go 的 Gin 框架等。由于 Python 在网络爬虫、数据分析、人工智能等方面有十分广泛的应用，在语言性能不是系统的瓶颈时，借助于 Python 的高开发效率，Python 的后端开发能带来不错的效果，所以我们以 Python 为基础来进行后端开发的基础。")]),t._v(" "),s("p",[t._v("在学习了 Python 后，业余时间也建议了解一下 Java 的 Spring Boot、Spring Cloud 等框架，他们的编码规范、设计风格能为你的开发提供了好的学习素材。")]),t._v(" "),s("p",[t._v("在 Python 中，以往使用 Flask 和 Django 的居多，但 Flask 对异步的支持较差，Django 体积太大，整体较为死板，而 FastAPI 支持异步、轻量级、开发效率高，所以我们使用 FastAPI 框架来进行学习。")]),t._v(" "),s("h3",{attrs:{id:"task-1-运行后端服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-1-运行后端服务"}},[t._v("#")]),t._v(" TASK 1：运行后端服务")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("resource/fastapi-demo")]),t._v("中有一个 FastAPI 的 demo，使用 pip 安装相应的第三库运行里面的 "),s("code",[t._v("main.py")]),t._v(" 文件，运行成功后可以看到如下输出：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(437),alt:""}})]),t._v(" "),s("p",[t._v("通过浏览器访问"),s("code",[t._v("localhost:8088/hello")]),t._v("可以看到“Hello, World!”，如果访问"),s("code",[t._v("localhost:8088/hello?name=张三")]),t._v("可以看到“Hello, 张三!”。")]),t._v(" "),s("h3",{attrs:{id:"task-2-编写一个简单的后端服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-2-编写一个简单的后端服务"}},[t._v("#")]),t._v(" TASK 2：编写一个简单的后端服务")]),t._v(" "),s("p",[t._v("通过 FastAPI 官网学习该框架，读懂 demo 的代码。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://fastapi.tiangolo.com/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("FastAPI 官网"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("任务描述")]),t._v("：")]),t._v(" "),s("p",[t._v("之前已经能够使用 pymongo 向 MongoDB 中插入了课程数据，现在编写一个服务，在接收请求后查询 mongo 中的课程信息并将其返回出去。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("思路")]),t._v(" "),s("p",[t._v("demo 中已经有一个服务用来响应"),s("code",[t._v("/hello")]),t._v("的请求，你需要模仿他写一个函数来响应"),s("code",[t._v("/course")]),t._v("的请求，在该函数中使用 pymongo 查询 mongo 中的课程信息并将它 return 出去。这样，你就可以通过浏览器访问"),s("code",[t._v("localhost:8088/course")]),t._v("来得到响应，看到课程信息。")])]),t._v(" "),s("h3",{attrs:{id:"task-3-将同步改为异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-3-将同步改为异步"}},[t._v("#")]),t._v(" TASK 3：将同步改为异步")]),t._v(" "),s("p",[t._v("PyMongo 是以同步方式查询 MongoDB，也就是在后端程序等待数据库完成读写前，后端程序不能做其他事情，但改为异步后，在程序向 mongo 发送一个读写IO的请求后，mongo 去查询数据，而后端程序可以转去做别的事情，这样就提高了性能。")]),t._v(" "),s("p",[t._v("FastAPI 是支持异步的。这借助 async/await 关键字来实现，"),s("a",{attrs:{href:"https://motor.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Motor"),s("OutboundLink")],1),t._v("库是一个可以通过异步的方式来读写 mongo，其接口与 pymongo 相似。")]),t._v(" "),s("p",[s("strong",[t._v("示例")]),t._v("：")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("resource/async-study/main.py")]),t._v(" 中，有两个相同功能的接口，都是发送 Request 请求外部网站的彩票信息，但一个是以同步方式发送，一个是以异步方式发送，对比这个例子，会发现关键差距在于 async/await 的使用，运行该示例，分别请求 "),s("code",[t._v("localhost:8080/sync")]),t._v(" 和 "),s("code",[t._v("localhost:8090/async")]),t._v(" 会看到返回数据相同，只是程序的实现方式上不同，异步的方式在请求量大时性能更好。")]),t._v(" "),s("p",[s("strong",[t._v("任务描述")]),t._v("：")]),t._v(" "),s("p",[t._v("将上一个 TASK 中的 pymongo 库更换为 motor 库，并通过异步的方式来操作 mongo。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("关于同步、异步的区别，FastAPI 官网上"),s("a",{attrs:{href:"https://fastapi.tiangolo.com/async/",target:"_blank",rel:"noopener noreferrer"}},[t._v("协程与async/await"),s("OutboundLink")],1),t._v("有更加详细的介绍。")])])])}),[],!1,null,null,null);o.default=e.exports}}]);